"""
This python file aims to check that the simple formula we use for the 
ripple field is accurate.
"""
import numpy as np
import matplotlib.pyplot as plt

def field_vwire(coords,
                z_min=0,
                z_max=1,
                current=1):
    """
    Function to compute the analytical magnetic field
    generated by a vertical wire at the origin.

    Parameters
    ----------
    coords : list
        coords is a list of shape (3,) where each element is the
        coordinates of the wire in the x, y, z directions.
    z_min : float
        Minimum z coordinate of the wire.
    z_max : float
        Maximum z coordinate of the wire.
    current : float
        Current of the wire.

    Returns
    -------
    B : list
        Magnetic field generated by the wire, with shape (3, np.shape(x)).
    """

    def scalar_func(x, y, z):
        """
        Function to compute the scalar component of the magnetic field.
        """
        mu0 = 4*np.pi*1e-7
        r2 = x**2 + y**2
        return 0.25 * mu0 * current / np.pi / r2 * (
            (z_max - z) / np.sqrt(r2 + (z_max - z)**2) + \
            (z - z_min) / np.sqrt(r2 + (z - z_min)**2)
        )

    x = coords[0]
    y = coords[1]
    z = coords[2]
    scalar_component = scalar_func(x, y, z)
    return [-y * scalar_component,
            x * scalar_component,
            x * 0]

def rotate_vector(vector, phi,
                  inverse=False):
    """
    Rotates a vector by 90 degrees about the y-axis,
    then by an angle phi around the z-axis. We use the right-hand rotation
    convention.

    Parameters
    ----------
    vector : list
        Vector to be rotated of shape (3,).
    phi : float
        Angle of rotation.

    Returns
    -------
    vector : list
        Rotated vector of shape (3,).
    """

    if inverse:
        return [-vector[2],
                vector[1] * np.cos(phi) - vector[0] * np.sin(phi),
                vector[0] * np.cos(phi) + vector[1] * np.sin(phi)]
    else:
        return [vector[2] * np.cos(phi) - vector[1] * np.sin(phi),
                vector[1] * np.cos(phi) + vector[2] * np.sin(phi),
                -vector[0]]

def field_coil(coords, phi,
               r_inner=0.5,
               r_outer=8.0,
               height=20,
               current=1e6):
    """
    Function to compute the analytical magnetic field generated by
    a picture-frame coil with the inner leg at R = r_inner and outer leg
    at R = r_outer with z going from -height/2 to height/2 with phi=phi.

    Parameters
    ----------
    coords : list
        coords is a list of shape (3,) where each element is the
        coordinates of the wire in the x, y, z directions.
    r_inner : float
        Inner radius of the coil.
    r_outer : float
        Outer radius of the coil.
    height : float
        Height of the coil.
    phi : float
        Angle of rotation.
    current : float
        Current of the wire.

    Returns
    -------
    B : list
        Magnetic field generated by the wire, with shape (3,).
    """

    def inner_field():
        """
        Function to the magnetic field created by the inner leg of the coil.
        
        Current goes in the positive z-direction.
        """
        coords_inner = [coords[0] - r_inner * np.cos(phi),
                        coords[1] - r_inner * np.sin(phi),
                        coords[2]]
        return field_vwire(coords_inner,
                           z_min=-height/2,
                           z_max=height/2,
                           current=current)

    def outer_field():
        """
        Function to the magnetic field created by the outer leg of the coil.
        
        Current goes in the negative z-direction.
        """
        coords_outer = [coords[0] - r_outer * np.cos(phi),
                        coords[1] - r_outer * np.sin(phi),
                        coords[2]]
        return field_vwire(coords_outer,
                           z_min=-height/2,
                           z_max=height/2,
                           current=-current)

    def upper_field():
        """
        Function to the magnetic field created by the upper part of the
        picture-frame coil.
        
        Current goes in the positive radial direction.
        """
        coords_upper = rotate_vector(coords, phi, inverse=True)
        coords_upper[0] = coords_upper[0] + height/2
        rotated_field = field_vwire(coords_upper,
                                    z_min=r_inner,
                                    z_max=r_outer,
                                    current=current)
        return rotate_vector(rotated_field, phi)

    def lower_field():
        """
        Function to the magnetic field created by the lower part of the
        picture-frame coil.

        Current goes in the negative radial direction.
        """
        coords_lower = rotate_vector(coords, phi, inverse=True)
        coords_lower[0] = coords_lower[0] - height/2
        rotated_field = field_vwire(coords_lower,
                                    z_min=r_inner,
                                    z_max=r_outer,
                                    current=-current)
        return rotate_vector(rotated_field, phi)

    b_coil = [0, 0, 0]
    b_lower = lower_field()
    b_upper = upper_field()
    b_inner = inner_field()
    b_outer = outer_field()
    for i in range(3):
        b_coil[i] = b_lower[i] + b_upper[i] + b_inner[i] + b_outer[i]

    return b_coil

def total_field(coords, num_coils,
                r_inner=0.5,
                r_outer=8.0,
                height=20,
                current=1e6):
    """
    Function to compute the total magnetic field generated by
    a set of picture-frame coils.

    Parameters
    ----------
    coords : list
        coords is a list of shape (3,) where each element is the
        coordinates of the wire in the x, y, z directions.
    num_coils : int
        Number of coils.
    r_inner : float
        Inner radius of the coil.
    r_outer : float
        Outer radius of the coil.
    height : float
        Height of the coil.
    current : float
        Current of the wire.

    Returns
    -------
    b_total : list
        Magnetic field generated by the coils, with shape (3,).
    """

    b_total = [0, 0, 0]
    for i in range(num_coils):
        phi = 2 * np.pi * i / num_coils
        b_coil = field_coil(coords, phi,
                            r_inner=r_inner,
                            r_outer=r_outer,
                            height=height,
                            current=current)
        for j in range(3):
            b_total[j] += + b_coil[j]
    return b_total

if __name__ == "__main__":

    MU0 = 4*np.pi*1e-7
    NUMBER_OF_COILS = 16
    HEIGHT = 20
    CURRENT = 1e6
    R_INNER = 0.5
    R_OUTER = 7.5
    X_MIN = 1
    X_MAX = 7
    N_COORDS = 1000

    x_coords = np.linspace(X_MIN, X_MAX, 100)
    y_coords = np.zeros_like(x_coords)
    z_coords = np.zeros_like(x_coords)
    phi_coords = np.arctan2(y_coords, x_coords)
    r_coords = np.sqrt(x_coords**2 + y_coords**2)
    plot_coords = [x_coords, y_coords, z_coords]
    total_b = total_field(plot_coords, NUMBER_OF_COILS,
                          r_inner=R_INNER,
                          r_outer=R_OUTER,
                          height=HEIGHT,
                          current=CURRENT)
    b_phi0 = 0.5 * MU0 * CURRENT * NUMBER_OF_COILS / np.pi / r_coords
    b_ripple = [total_b[0] + np.sin(phi_coords) * b_phi0,
                total_b[1] - np.cos(phi_coords) * b_phi0,
                total_b[2]]
    simple_outer_ripple = b_phi0 * (r_coords / R_OUTER)**NUMBER_OF_COILS
    simple_inner_ripple = b_phi0 * (R_INNER / r_coords)**NUMBER_OF_COILS

    fig, ax = plt.subplots()
    # labels = ['b_x', 'b_y', 'b_z']
    # for ilabel, label in enumerate(labels):
    #     ax.plot(x_coords, b_ripple[ilabel], label=label)
    #     ax.set_yscale('log')
    ax.plot(x_coords, b_ripple[1], label='Ripple')
    ax.plot(x_coords, simple_outer_ripple, label='Outer')
    ax.plot(x_coords, simple_inner_ripple, label='Inner')
    ax.plot(x_coords, simple_inner_ripple + simple_outer_ripple,
            label='Total')
    ax.set_yscale('log')
    ax.set_xlabel('x [m]')
    ax.set_ylabel('b [T]')
    ax.legend()
    plt.show()
